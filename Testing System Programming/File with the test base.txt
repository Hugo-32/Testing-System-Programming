THEME - CYCLES.

1. What is a loop in C++?
a) A data type used to store multiple values
b) A statement that executes a block of code repeatedly
c) A function that takes input and returns output
d) A conditional statement that controls program flow
Answer: b) A statement that executes a block of code repeatedly

2. What is the syntax for a for loop in C++?
a) for (i = 0; i < n; i++)
b) for (i = n; i > 0; i--)
c) for (i = 0; i <= n; i++)
d) for (i = n; i >= 0; i--)
Answer: a) for (i = 0; i < n; i++)

3. What is the syntax for a while loop in C++?
a) while (i < n) { }
b) while (i > n) { }
c) while (i <= n) { }
d) while (i >= n) { }
Answer: a) while (i < n) { }

4. What is the syntax for a do-while loop in C++?
a) do { } while (i < n);
b) do { } while (i > n);
c) do { } while (i <= n);
d) do { } while (i >= n);
Answer: a) do { } while (i < n);

5. How many times will a for loop with the condition i < 5 be executed if i is initially 0?
a) 4
b) 5
c) 6
d) 0
Answer: b) 5

6. What is the purpose of the continue statement in C++?
a) To exit a loop
b) To skip the current iteration of a loop and continue with the next iteration
c) To execute a block of code repeatedly
d) To initialize a loop variable
Answer: b) To skip the current iteration of a loop and continue with the next iteration

7. What is the purpose of the break statement in C++?
a) To skip the current iteration of a loop and continue with the next iteration
b) To execute a block of code repeatedly
c) To exit a loop
d) To initialize a loop variable
Answer: c) To exit a loop

8. What is the difference between a while loop and a do-while loop in C++?
a) There is no difference
b) A while loop always executes at least once, while a do-while loop may not execute at all
c) A do-while loop always executes at least once, while a while loop may not execute at all
d) A while loop and a do-while loop are used for different types of iterations
Answer: c) A do-while loop always executes at least once, while a while loop may not execute at all

9. What is the difference between a for loop and a while loop in C++?
a) There is no difference
b) A for loop is used when the number of iterations is known in advance, while a while loop is used when the number of iterations is not known in advance
c) A while loop is used when the number of iterations is known in advance, while a for loop is used when the number of iterations is not known in advance
d) A for loop and a while loop are used for different types of iterations
Answer: b) A for loop is used when the number of iterations is known in advance, while a while loop is used when the number of iterations is not known in advance

10. What is an infinite loop in C++?
a) A loop that executes a block of code a fixed number of times
b) A loop that executes a block of code an unknown number of times
c) A loop that never terminates
d) A loop that terminates after a certain condition is met
Answer: c) A loop that never terminates

11. What is the purpose of a nested loop in C++?
a) To execute a block of code repeatedly
b) To skip the current iteration of a loop and continue with the next iteration
c) To exit a loop
d) To perform iterations within iterations
Answer: d) To perform iterations within iterations

12. What is the syntax for a nested for loop in C++?
a) for (i = 0; i < n; i++) { for (j = 0; j < m; j++) { } }
b) for (i = n; i > 0; i--) { for (j = m; j > 0; j--) { } }
c) for (i = 0; i <= n; i++) { for (j = 0; j <= m; j++) { } }
d) for (i = n; i >= 0; i--) { for (j = m; j >= 0; j--) { } }
Answer: a) for (i = 0; i < n; i++) { for (j = 0; j < m; j++) { } }

13. What is the purpose of a loop counter in C++?
a) To control the number of iterations in a loop
b) To execute a block of code repeatedly
c) To exit a loop
d) To initialize a loop variable
Answer: a) To control the number of iterations in a loop

14. What is the syntax for a range-based for loop in C++?
a) for (i : container) { }
b) for (i in container) { }
c) for (i = 0; i < container.size(); i++) { }
d) for (i = container.begin(); i != container.end(); i++) { }
Answer: a) for (i : container) { }

15. What is the purpose of the break statement in a nested loop in C++?
a) To skip the current iteration of a loop and continue with the next iteration
b) To execute a block of code repeatedly
c) To exit the innermost loop
d) To exit the outermost loop
Answer: c) To exit the innermost loop

16. What is the purpose of the continue statement in a nested loop in C++?
a) To exit the innermost loop
b) To skip the current iteration of the innermost loop and continue with the next iteration of the outer loop
c) To skip the current iteration of the outer loop and continue with the next iteration of the innermost loop
d) To execute a block of code repeatedly
Answer: b) To skip the current iteration of the innermost loop and continue with the next iteration of the outer loop

17. What is the purpose of the do-while loop in C++?
a) To execute a block of code repeatedly
b) To skip the current iteration of a loop and continue with the next iteration
c) To exit a loop
d) To execute a block of code at least once, and then continue to execute it repeatedly as long as a certain condition is met
Answer: d) To execute a block of code at least once, and then continue to execute it repeatedly as long as a certain condition is met

18. What is the purpose of the while loop in C++?
a) To execute a block of code repeatedly
b) To execute a block of code as long as a certain condition is met
c) To exit a loop
d) To skip the current iteration of a loop and continue with the next iteration
Answer: b) To execute a block of code as long as a certain condition is met

19. What is an infinite loop in C++?
a) A loop that executes a block of code a fixed number of times
b) A loop that executes a block of code an unknown number of times
c) A loop that never terminates
d) A loop that terminates after a certain condition is met
Answer: c) A loop that never terminates

20. How can you prevent an infinite loop in C++?
a) By using a break statement
b) By using a continue statement
c) By using a while loop instead of a for loop
d) By ensuring that the loop condition eventually becomes false
Answer: d) By ensuring that the loop condition eventually becomes false

21. What is the purpose of the do-while loop in C++?
a) To execute a block of code repeatedly
b) To skip the current iteration of a loop and continue with the next iteration
c) To exit a loop
d) To execute a block of code at least once, and then continue to execute it repeatedly as long as a certain condition is met
Answer: d) To execute a block of code at least once, and then continue to execute it repeatedly as long as a certain condition is met

22. What is the difference between a while loop and a do-while loop in C++?
a) A while loop only executes if the condition is initially true, while a do-while loop always executes at least once
b) A while loop always executes at least once, while a do-while loop only executes if the condition is initially true
c) A while loop and a do-while loop are interchangeable and can be used interchangeably
d) There is no difference between a while loop and a do-while loop
Answer: a) A while loop only executes if the condition is initially true, while a do-while loop always executes at least once

23. What is the syntax for a while loop in C++?
a) while (condition) { }
b) while (i < n) { }
c) while (true) { }
d) while (i > 0) { }
Answer: a) while (condition) { }

24. What is the syntax for a do-while loop in C++?
a) do { } while (condition);
b) while (condition) { }
c) for (i = 0; i < n; i++) { }
d) do while (condition) { }
Answer: a) do { } while (condition);

25. What is the purpose of the continue statement in a loop in C++?
a) To exit the loop
b) To skip the current iteration of the loop and continue with the next iteration
c) To execute a block of code repeatedly
d) To initialize a loop variable
Answer: b) To skip the current iteration of the loop and continue with the next iteration

26. What is the purpose of the break statement in a loop in C++?
a) To skip the current iteration of the loop and continue with the next iteration
b) To execute a block of code repeatedly
c) To exit the loop
d) To initialize a loop variable
Answer: c) To exit the loop

27. What is the difference between a for loop and a range-based for loop in C++?
a) A for loop is used to iterate over a range of values, while a range-based for loop is used to iterate over a container or sequence
b) A for loop and a range-based for loop are interchangeable and can be used interchangeably
c) A for loop is used to iterate over a container or sequence, while a range-based for loop is used to iterate over a range of values
d) There is no difference between a for loop and a range-based for loop
Answer: a) A for loop is used to iterate over a range of values, while a range-based for loop is used to iterate over a container or sequence

28. What is the purpose of a loop in programming?
a) To execute a block of code repeatedly
b) To skip the current iteration of a loop and continue with the next iteration
c) To exit a loop
d) To execute a block of code a fixed number of times or until a certain condition is met
Answer: d) To execute a block of code a fixed number of times or until a certain condition is met

29. What is the difference between a do-while loop and a while loop in C++?
a) A do-while loop executes the code block at least once, while a while loop may not execute at all if the condition is false initially
b) A do-while loop is used for iterating over a container or sequence, while a while loop is used for iterating over a range of values
c) A do-while loop executes the code block only if the condition is true initially, while a while loop always executes the code block at least once
d) There is no difference between a do-while loop and a while loop
Answer: a) A do-while loop executes the code block at least once, while a while loop may not execute at all if the condition is false initially

30. What is the purpose of the switch statement in C++?
a) To execute a block of code repeatedly
b) To exit a loop
c) To select one of several code blocks to execute based on the value of a variable
d) To initialize a loop variable
Answer: c) To select one of several code blocks to execute based on the value of a variable

THEME - ARRAYS (ONE- AND TWO-DIMENSIONAL).

1. What is an array in C++?
a) A data structure used to store a collection of elements of the same data type
b) A loop construct used to iterate over a sequence of values
c) A function used to perform a specific task
d) A conditional statement used to control program flow
Answer: a) A data structure used to store a collection of elements of the same data type

2. How is an array declared in C++?
a) int array[10];
b) array<int> arr(10);
c) int [] array = {1, 2, 3, 4, 5};
d) int array = new int[10];
Answer: a) int array[10];

3. What is the maximum number of elements that an array can hold in C++?
a) 100
b) 1000
c) 10000
d) There is no fixed maximum limit
Answer: d) There is no fixed maximum limit

4. How can you access an element in an array in C++?
a) Using the index of the element inside square brackets
b) Using the name of the array
c) Using a pointer to the array
d) Using the sizeof operator
Answer: a) Using the index of the element inside square brackets

5. How is a two-dimensional array declared in C++?
a) int array[10][10];
b) int *array = new int[10];
c) array<int, 2> arr;
d) int array = new int[10][10];
Answer: a) int array[10][10];

6. What is the syntax for accessing an element in a two-dimensional array in C++?
a) array[i, j]
b) array[i][j]
c) array[i; j]
d) array(i, j)
Answer: b) array[i][j]

7. What is the purpose of a loop when working with arrays in C++?
a) To access each element in the array
b) To declare the array
c) To initialize the array
d) To sort the array
Answer: a) To access each element in the array

8. What is the difference between a one-dimensional array and a two-dimensional array in C++?
a) A one-dimensional array has a single row of elements, while a two-dimensional array has multiple rows and columns of elements
b) A one-dimensional array has multiple rows and columns of elements, while a two-dimensional array has a single row of elements
c) There is no difference between a one-dimensional array and a two-dimensional array
d) A one-dimensional array can only store integers, while a two-dimensional array can store any data type
Answer: a) A one-dimensional array has a single row of elements, while a two-dimensional array has multiple rows and columns of elements

9. What is the syntax for initializing an array in C++?
a) int array[5] = {1, 2, 3, 4, 5};
b) int [] array = {1, 2, 3, 4, 5};
c) array<int> arr = {1, 2, 3, 4, 5};
d) int array = new int[5]{1, 2, 3, 4, 5};
Answer: a) int array[5] = {1, 2, 3, 4, 5};

10. How can you find the length of an array in C++?
a) Using the sizeof operator
b) Using the length() function
c) Using the size() function
d) Using a loop to count the number of elements in the array
Answer: a) Using the sizeof operator

11. What is the syntax for iterating over a one-dimensional array in C++?
a) for (int i = 0; i < array.size(); i++)
b) for (int i = 0; i <= array.length(); i++)
c) for (int i = 0; i < sizeof(array)/sizeof(array[0]); i++)
d) for (int i = 0; i <= sizeof(array); i++)
Answer: c) for (int i = 0; i < sizeof(array)/sizeof(array[0]); i++)

12. What is the syntax for iterating over a two-dimensional array in C++?
a) for (int i = 0; i < array.length(); i++) for (int j = 0; j < array.length(); j++)
b) for (int i = 0; i <= array.size(); i++) for (int j = 0; j <= array.size(); j++)
c) for (int i = 0; i < sizeof(array)/sizeof(array[0]); i++) for (int j = 0; j < sizeof(array[0])/sizeof(array[0][0]); j++)
d) for (int i = 0; i <= sizeof(array); i++) for (int j = 0; j <= sizeof(array[0]); j++)
Answer: c) for (int i = 0; i < sizeof(array)/sizeof(array[0]); i++) for (int j = 0; j < sizeof(array[0])/sizeof(array[0][0]); j++)

13. What is the syntax for passing an array to a function in C++?
a) void function(int array[]) {...}
b) void function(array<int> arr) {...}
c) void function(int *array) {...}
d) void function(int &array) {...}
Answer: a) void function(int array[]) {...}

14. How is memory allocated for an array in C++?
a) The programmer specifies the amount of memory to allocate
b) Memory is allocated dynamically at runtime
c) The operating system allocates memory automatically
d) The compiler allocates memory at compile time
Answer: b) Memory is allocated dynamically at runtime

15. What is the syntax for deallocating memory for an array in C++?
a) delete array;
b) delete[] array;
c) free(array);
d) free[] array;
Answer: b) delete[] array;

16. What is the purpose of the sizeof operator in C++?
a) To return the number of bytes occupied by a variable or data type
b) To return the value of a variable or expression
c) To return the address of a variable or function
d) To perform bitwise operations on variables
Answer: a) To return the number of bytes occupied by a variable or data type

17. What is the difference between a static and dynamic array in C++?
a) A static array is declared at runtime, while a dynamic array is declared at compile time
b) A static array has a fixed size, while a dynamic array can be resized at runtime
c) There is no difference between a static and dynamic array
d) A static array is stored on the stack, while a dynamic array is stored on the heap
Answer: b) A static array has a fixed size, while a dynamic array can be resized at runtime

18. What is the syntax for resizing a dynamic array in C++?
a) array.resize(size);
b) array.reserve(size);
c) realloc(array, size);
d) new int[size];
Answer: b) array.reserve(size);

19. What is the difference between an array and a vector in C++?
a) An array is a fixed-size collection of elements, while a vector is a dynamically resizable collection of elements.
b) An array is a collection of elements stored on the stack, while a vector is a collection of elements stored on the heap.
c) An array is a collection of elements of the same data type, while a vector can hold elements of different data types.
d) There is no difference between an array and a vector.
Answer: a) An array is a fixed-size collection of elements, while a vector is a dynamically resizable collection of elements.

20. What is a multi-dimensional array in C++?
a) An array that contains elements of multiple data types
b) An array that is allocated dynamically at runtime
c) An array that contains arrays as its elements, forming a matrix-like structure
d) An array that can be resized at runtime
Answer: c) An array that contains arrays as its elements, forming a matrix-like structure

21. How do you declare a multi-dimensional array in C++?
a) int arr[5,5];
b) int arr[5][5];
c) int arr<5,5>;
d) int arr{5,5};
Answer: b) int arr[5][5];

22. How do you access a specific element in a multi-dimensional array in C++?
a) arr[3,4]
b) arr[3][4]
c) arr[4,3]
d) arr[4][3]
Answer: b) arr[3][4]

23. How do you initialize a multi-dimensional array in C++?
a) int arr[5][5] = {0};
b) int arr[5][5] = {{0}};
c) int arr[5][5] = {0,0,0,0,0};
d) int arr[5][5] = {{0,0,0,0,0}};
answer: d) int arr[5][5] = {{0,0,0,0,0}};

24. Can the size of a multi-dimensional array be changed at runtime in C++?
a) Yes
b) No
c) Idk
d) What?
Answer: b) No

25. How do you pass a multi-dimensional array to a function in C++?
a) void function(int arr[][]) {...}
b) void function(int arr[5][5]) {...}
c) void function(int **arr) {...}
d) void function(int &arr[][]) {...}
Answer: b) void function(int arr[5][5]) {...}

26. How do you return a multi-dimensional array from a function in C++?
a) int** function() {...}
b) int function[][] {...}
c) int function()[][] {...}
d) int function[] {...}
Answer: a) int** function() {...}

27. How do you allocate memory for a multi-dimensional array in C++?
a) int arr[5][5];
b) int** arr = new int*[5]; for(int i = 0; i < 5; i++) arr[i] = new int[5];
c) int* arr = new int[5][5];
d) int arr[][] = new int[5][5];
Answer: b) int** arr = new int*[5]; for(int i = 0; i < 5; i++) arr[i] = new int[5];

28. How do you deallocate memory for a multi-dimensional array in C++?
a) delete[] arr;
b) delete[][] arr;
c) for(int i = 0; i < 5; i++) delete[] arr[i]; delete[] arr;
d) free(arr);
Answer: c) for(int i = 0; i < 5; i++) delete[] arr[i]; delete[] arr;

29. How do you find the number of rows in a multi-dimensional array in C++?
a) sizeof(arr)/sizeof(arr[0]);
b) sizeof(arr)/sizeof(int);
c) sizeof(arr)/sizeof(arr[0][0]);
d) sizeof(arr)/sizeof(*arr);
Answer: a) sizeof(arr)/sizeof(arr[0]);

30.How do you find the number of columns in a multi-dimensional array in C++?
a) sizeof(arr)/sizeof(arr[0]);
b) sizeof(arr)/sizeof(int);
c) sizeof(arr)/sizeof(arr[0][0]);
d) sizeof(arr)/sizeof(*arr[0]);
Answer: d) sizeof(arr)/sizeof(*arr[0]);

THEME - STRINGS.

1. What is a string in C++?
a) A data type used to store multiple characters
b) A data type used to store a single character
c) A data type used to store integers
d) A data type used to store floating-point numbers
Answer: a) A data type used to store multiple characters

2. What is the syntax for declaring a string variable in C++?
a) char str[];
b) string str;
c) str[] = "hello";
d) str = "hello";
Answer: b) string str;

3. How do you assign a value to a string variable in C++?
a) str = "hello";
b) str[] = "hello";
c) str = 'h';
d) str = 1;
Answer: a) str = "hello";

4. How do you find the length of a string in C++?
a) len(str);
b) length(str);
c) str.length();
d) strlen(str);
Answer: c) str.length();

5. What is the difference between the C-style string and the C++ string?
a) There is no difference
b) C-style string is null-terminated, while C++ string is not
c) C-style string is immutable, while C++ string is mutable
d) C-style string is shorter, while C++ string is longer
Answer: b) C-style string is null-terminated, while C++ string is not

6. What is the function used to concatenate two strings in C++?
a) strcat()
b) strconcat()
c) append()
d) add()
Answer: c) append()

7. How do you access the character at a particular index in a string in C++?
a) str[index]
b) str.charAt(index)
c) str.index(index)
d) str.getChar(index)
Answer: a) str[index]

8. What is the function used to compare two strings in C++?
a) strcmp()
b) strcompare()
c) compare()
d) equals()
Answer: c) compare()

9. What is the return type of the compare() function in C++?
a) int
b) bool
c) char
d) float
Answer: a) int

10. What is the function used to find a substring in a string in C++?
a) strfind()
b) substr()
c) find()
d) search()
Answer: c) find()

11. What is the return type of the find() function in C++?
a) int
b) bool
c) char
d) float
Answer: a) int

12. What is the function used to insert a substring into a string in C++?
a) strinsert()
b) insert()
c) substr()
d) stradd()
Answer: b) insert()

13. What is the function used to erase a substring from a string in C++?
a) strerase()
b) erase()
c) substr()
d) strdelete()
Answer: b) erase()

14. What is the function used to replace a substring in a string with another substring in C++?
a) strreplace()
b) replace()
c) substr()
d) strswap()
Answer: b) replace()

15. What is the function used to convert a string to uppercase in C++?
a) toupper()
b) strupper()
c) uppercase()
d) toUpper()
Answer: c) uppercase()

16. What is the function used to convert a string to lowercase in C++?
a) tolower()
b) strlower()
c) lowercase()
d) toLower()
Answer: c) lowercase()

17. What is the function used to remove all occurrences of a character from a string in C++?
a) remove_char()
b) strremove()
c) erase()
d) remove()
Answer: d) remove()

18. What is the function used to reverse a string in C++?
a) reverse()
b) strreverse()
c) flip()
d) rotate()
Answer: a) reverse()

19. What is the function used to convert a string to an integer in C++?
a) to_int()
b) stoi()
c) str_to_int()
d) int_convert()
Answer: b) stoi()

20. What is the function used to convert an integer to a string in C++?
a) to_string()
b) int_to_str()
c) convert_str()
d) str_convert()
Answer: a) to_string()

21. What is the function used to trim whitespace from the beginning and end of a string in C++?
a) strtrim()
b) trim()
c) trim_whitespace()
d) remove_whitespace()
Answer: b) trim()

22. What is the function used to pad a string with a specific character to a certain length in C++?
a) strpad()
b) pad()
c) pad_string()
d) add_padding()
Answer: b) pad()

23. What is the function used to split a string into substrings based on a delimiter in C++?
a) strsplit()
b) split()
c) split_string()
d) substring()
Answer: b) split()

24. What is the return type of the split() function in C++?
a) string
b) vector<string>
c) int
d) bool
Answer: b) vector<string>

25. What is the function used to join a vector of strings into a single string with a delimiter in C++?
a) strjoin()
b) join()
c) join_string()
d) concatenate()
Answer: b) join()

26. What is the function used to check if a string starts with a specific prefix in C++?
a) starts_with()
b) strstarts()
c) check_prefix()
d) prefix()
Answer: a) starts_with()

27. What is the function used to check if a string ends with a specific suffix in C++?
a) ends_with()
b) strends()
c) check_suffix()
d) suffix()
Answer: a) ends_with()

28. What is the function used to find the first occurrence of a character in a string in C++?
a) strfind()
b) find_char()
c) find()
d) search()
Answer: c) find()

29. What is the function used to convert a string to a double in C++?
a) to_double()
b) stod()
c) str_to_double()
d) double_convert()
Answer: b) stod()

30. What is the function used to convert a double to a string in C++?
a) to_string()
b) double_to_str()
c) convert_str()
d) str_convert()
Answer: a) to_string()

THEME - RECURSION.

1. What is recursion in C++?
a) A loop that repeats a set of instructions
b) A function that calls itself
c) A function that returns a value
d) A variable that changes its value during program execution
Answer: b) A function that calls itself

2. What is the base case in recursion?
a) The case where the function is called for the first time
b) The case where the function returns a value
c) The case where the function stops calling itself
d) The case where the function is called recursively
Answer: c) The case where the function stops calling itself

3. What is the difference between direct and indirect recursion?
a) Direct recursion is when a function calls itself, while indirect recursion is when a function calls another function that eventually calls the original function.
b) Direct recursion is when a function calls another function, while indirect recursion is when a function calls itself.
c) Direct recursion is when a function returns a value, while indirect recursion is when a function does not return a value.
d) Direct recursion is when a function uses a loop, while indirect recursion is when a function does not use a loop.
Answer: a) Direct recursion is when a function calls itself, while indirect recursion is when a function calls another function that eventually calls the original function.

4. What is the maximum number of recursive calls that can be made in C++?
a) It depends on the available memory
b) It depends on the processor speed
c) It depends on the compiler used
d) There is no maximum limit
Answer: a) It depends on the available memory

5. What is the factorial of a number?
a) The sum of all the numbers up to the given number
b) The product of all the numbers up to the given number
c) The difference between all the numbers up to the given number
d) The quotient of all the numbers up to the given number
Answer: b) The product of all the numbers up to the given number

6. What is the base case for computing the factorial of a number using recursion?
a) n == 0
b) n == 1
c) n < 1
d) n > 1
Answer: b) n == 1

7. What is the output of the following recursive function for n = 3?
int recursiveFunc(int n) {
    if (n == 1) {
        return 1;
    } else {
        return n * recursiveFunc(n-1);
    }
}
a) 1
b) 2
c) 3
d) 6
Answer: d) 6

8. What is the output of the following recursive function for n = 4?
int recursiveFunc(int n) {
    if (n == 0) {
        return 0;
    } else {
        return n + recursiveFunc(n-1);
    }
}
a) 0
b) 6
c) 10
d) 24
Answer: c) 10

9. What is the output of the following recursive function for n = 5?
arduino
Copy code
int recursiveFunc(int n) {
    if (n < 1) {
        return 0;
    } else {
        return recursiveFunc(n-1) + n;
    }
}
a) 0
b) 10
c) 15
d) 25
Answer: c) 15

10. What is a recursive algorithm to compute the Fibonacci sequence?
a) Check if n == 0 or n == 1, return 1, otherwise return fibonacci(n-2)
b) Check if n == 0 or n == 1, return n, otherwise return fibonacci(n-1) + fibonacci(n-2)
c) Check if n == 0 or n == 1, return 0, otherwise return fibonacci(n-1) - fibonacci(n-2)
d) Check if n == 0 or n == 1, return 0, otherwise return fibonacci(n+1) + fibonacci(n-1)
Answer: b) Check if n == 0 or n == 1, return n, otherwise return fibonacci(n-1) + fibonacci(n-2)

11. What is the output of the following recursive function for n = 6?
int recursiveFunc(int n) {
if (n <= 0) {
return 0;
} else if (n % 2 == 0) {
return recursiveFunc(n-1);
} else {
return n + recursiveFunc(n-2);
}
}
a) 6
b) 9
c) 12
d) 15
Answer: d) 15

12. What is tail recursion?
a) A function that returns a value
b) A function that calls itself at the end of the function
c) A function that calls another function
d) A function that uses a loop
Answer: b) A function that calls itself at the end of the function

13. What is the difference between tail recursion and non-tail recursion?
a) Tail recursion uses a loop, while non-tail recursion does not use a loop.
b) Tail recursion returns a value, while non-tail recursion does not return a value.
c) Tail recursion calls itself at the end of the function, while non-tail recursion calls itself at the beginning of the function.
d) There is no difference between tail recursion and non-tail recursion.
Answer: c) Tail recursion calls itself at the end of the function, while non-tail recursion calls itself at the beginning of the function.

14. What is the output of the following tail recursive function for n = 4?
int recursiveFunc(int n, int result) {
if (n == 0) {
return result;
} else {
return recursiveFunc(n-1, result*n);
}
}
a) 0
b) 1
c) 6
d) 24
Answer: d) 24

15. What is the output of the following non-tail recursive function for n = 5?
int recursiveFunc(int n) {
if (n == 0) {
return 0;
} else {
return recursiveFunc(n-1) + n;
}
}
a) 0
b) 10
c) 15
d) 25
Answer: c) 15

16. What is the output of the following tail recursive function for n = 6?
int recursiveFunc(int n, int a, int b) {
if (n == 0) {
return a;
} else {
return recursiveFunc(n-1, b, a+b);
}
}
a) 5
b) 8
c) 13
d) 21
Answer: c) 13

17. What is the time complexity of the recursive function for computing the factorial of a number?
a) O(n)
b) O(n^2)
c) O(log n)
d) O(2^n)
Answer: a) O(n)

18. What is the time complexity of the recursive algorithm for computing the Fibonacci sequence?
a) O(n)
b) O(n^2)
c) O(log n)
d) O(2^n)
Answer: d) O(2^n)

19. What is recursion in C++?
a) A loop that repeats a set of instructions
b) A function that calls itself
c) A function that returns a value
d) A variable that changes its value during program execution
Answer: b) A function that calls itself

20. What is the base case in recursion?
a) The case where the function is called for the first time
b) The case where the function returns a value
c) The case where the function stops calling itself
d) The case where the function is called recursively
Answer: c) The case where the function stops calling itself

21. What is the difference between direct and indirect recursion?
a) Direct recursion is when a function calls itself, while indirect recursion is when a function calls another function that eventually calls the original function.
b) Direct recursion is when a function calls another function, while indirect recursion is when a function calls itself.
c) Direct recursion is when a function returns a value, while indirect recursion is when a function does not return a value.
d) Direct recursion is when a function uses a loop, while indirect recursion is when a function does not use a loop.
Answer: a) Direct recursion is when a function calls itself, while indirect recursion is when a function calls another function that eventually calls the original function.

22. What is the maximum number of recursive calls that can be made in C++?
a) It depends on the available memory
b) It depends on the processor speed
c) It depends on the compiler used
d) There is no maximum limit
Answer: a) It depends on the available memory

23. What is the factorial of a number?
a) The sum of all the numbers up to the given number
b) The product of all the numbers up to the given number
c) The difference between all the numbers up to the given number
d) The quotient of all the numbers up to the given number
Answer: b) The product of all the numbers up to the given number

24. What is the base case for computing the factorial of a number using recursion?
a) n == 0
b) n == 1
c) n < 1
d) n > 1
Answer: b) n == 1

25. What is the output of the following recursive function for n = 3?
int recursiveFunc(int n) {
    if (n == 1) {
        return 1;
    } else {
        return n * recursiveFunc(n-1);
    }
}
a) 1
b) 2
c) 3
d) 6
Answer: d) 6

26. What is the output of the following recursive function for n = 4?
int recursiveFunc(int n) {
    if (n == 0) {
        return 0;
    } else {
        return n + recursiveFunc(n-1);
    }
}
a) 0
b) 6
c) 10
d) 24
Answer: c) 10

27. What is the output of the following recursive function for n = 5?
arduino
Copy code
int recursiveFunc(int n) {
    if (n < 1) {
        return 0;
    } else {
        return recursiveFunc(n-1) + n;
    }
}
a) 0
b) 10
c) 15
d) 25
Answer: c) 15

28. What is a recursive algorithm to compute the Fibonacci sequence?
a) Check if n == 0 or n == 1, return 1, otherwise return fibonacci(n-2)
b) Check if n == 0 or n == 1, return n, otherwise return fibonacci(n-1) + fibonacci(n-2)
c) Check if n == 0 or n == 1, return 0, otherwise return fibonacci(n-1) - fibonacci(n-2)
d) Check if n == 0 or n == 1, return 0, otherwise return fibonacci(n+1) + fibonacci(n-1)
Answer: b) Check if n == 0 or n == 1, return n, otherwise return fibonacci(n-1) + fibonacci(n-2)

29. What is the output of the following recursive function for n = 6?
int recursiveFunc(int n) {
if (n <= 0) {
return 0;
} else if (n % 2 == 0) {
return recursiveFunc(n-1);
} else {
return n + recursiveFunc(n-2);
}
}
a) 6
b) 9
c) 12
d) 15
Answer: d) 15

30. What is tail recursion?
a) A function that returns a value
b) A function that calls itself at the end of the function
c) A function that calls another function
d) A function that uses a loop
Answer: b) A function that calls itself at the end of the function

THEME - STRUCTURES.

1. What is a data structure in C++?
a) A way to store and organize data in memory
b) A way to format data on the screen
c) A way to input data from the keyboard
d) A way to output data to a file
Answer: a) A way to store and organize data in memory

2. Which of the following is a linear data structure?
a) Binary tree
b) Stack
c) Graph
d) Heap
Answer: b) Stack

3. Which of the following is a non-linear data structure?
a) Array
b) Linked list
c) Queue
d) Tree
Answer: d) Tree

4. Which of the following is a dynamic data structure?
a) Array
b) Stack
c) Queue
d) Linked list
Answer: d) Linked list

5. What is a stack in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A data structure that stores elements in a binary tree
Answer: b) A data structure that stores elements in a last-in, first-out (LIFO) order

6. What is a queue in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A data structure that stores elements in a binary tree
Answer: a) A data structure that stores elements in a first-in, first-out (FIFO) order

7. What is a linked list in C++?
a) A data structure that stores elements in an array
b) A data structure that stores elements in a stack
c) A data structure that stores elements in a queue
d) A data structure that stores elements in a sequence of nodes linked together
Answer: d) A data structure that stores elements in a sequence of nodes linked together

8. What is a doubly linked list in C++?
a) A linked list where each node has two pointers, one to the previous node and one to the next node
b) A linked list where each node has two values, one for the key and one for the data
c) A linked list where each node has two children, one to the left and one to the right
d) A linked list where each node has two weights, one for the distance and one for the cost
Answer: a) A linked list where each node has two pointers, one to the previous node and one to the next node

9. What is a binary tree in C++?
a) A tree where each node has two children
b) A tree where each node has three children
c) A tree where each node has four children
d) A tree where each node has five children
Answer: a) A tree where each node has two children

10. What is a binary search tree in C++?
a) A binary tree where each node has two children and the left child is smaller than the parent and the right child is greater than the parent
b) A binary tree where each node has two children and the left child is greater than the parent and the right child is smaller than the parent
c) A binary tree where each node has three children and the middle child is equal to the parent
d) A binary tree where each node has four children and the two middle children are equal to the parent
Answer: a) A binary tree where each node has two children and the left child is smaller than the parent and the right child is greater than the parent

11. What is a balanced binary search tree?
a) A binary search tree where each node has two children and the left child is smaller than the parent and the right child is greater than the parent
b) A binary search tree where each node has two children and the left child is greater than the parent and the right child is smaller than the parent
c) A binary search tree where the height of the left and right subtrees of each node differ by at most one
d) A binary search tree where the height of the left subtree is always greater than the height of the right subtree
Answer: c) A binary search tree where the height of the left and right subtrees of each node differ by at most one

12. What is a heap in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A complete binary tree where the parent node is greater than or equal to its child nodes
Answer: d) A complete binary tree where the parent node is greater than or equal to its child nodes

13. Which of the following is not a type of heap?
a) Max heap
b) Min heap
c) Binary heap
d) Quad heap
Answer: d) Quad heap

14. What is a priority queue in C++?
a) A queue where elements are stored in a first-in, first-out (FIFO) order
b) A queue where elements are stored in a last-in, first-out (LIFO) order
c) A queue where elements are stored in a sorted order
d) A queue where elements are stored based on their priority
Answer: d) A queue where elements are stored based on their priority

15. What is a hash table in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A data structure that stores elements based on their hash values
Answer: d) A data structure that stores elements based on their hash values

16. What is collision resolution in hash tables?
a) The process of finding the hash value of an element
b) The process of storing an element in the hash table
c) The process of handling cases where two elements have the same hash value
d) The process of deleting an element from the hash table
Answer: c) The process of handling cases where two elements have the same hash value

17. Which of the following is not a collision resolution technique in hash tables?
a) Chaining
b) Linear probing
c) Quadratic probing
d) Binary search
Answer: d) Binary search

18. What is a graph in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A collection of vertices and edges that connect them
Answer: d) A collection of vertices and edges that connect them

19. What is a directed graph in C++?
a) A graph where each edge has a direction
b) A graph where the edges have no direction
c) A graph where each vertex has a direction
d) A graph where the edges have weights
Answer: a) A graph where each edge has a direction

20. What is a spanning tree in a graph?
a) A tree that includes all vertices of the graph and a subset of its edges, with no cycles
b) A tree that includes only some vertices of the graph and all of its edges, with no cycles
c) A tree that includes all vertices of the graph and all of its edges, with no cycles
d) A tree that includes only some vertices of the graph and a subset of its edges, with no cycles
Answer: a) A tree that includes all vertices of the graph and a subset of its edges, with no cycles

21. What is a data structure in C++?
a) A way to store and organize data in memory
b) A way to format data on the screen
c) A way to input data from the keyboard
d) A way to output data to a file
Answer: a) A way to store and organize data in memory

22. Which of the following is a linear data structure?
a) Binary tree
b) Stack
c) Graph
d) Heap
Answer: b) Stack

23. Which of the following is a non-linear data structure?
a) Array
b) Linked list
c) Queue
d) Tree
Answer: d) Tree

24. Which of the following is a dynamic data structure?
a) Array
b) Stack
c) Queue
d) Linked list
Answer: d) Linked list

25. What is a stack in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A data structure that stores elements in a binary tree
Answer: b) A data structure that stores elements in a last-in, first-out (LIFO) order

26. What is a queue in C++?
a) A data structure that stores elements in a first-in, first-out (FIFO) order
b) A data structure that stores elements in a last-in, first-out (LIFO) order
c) A data structure that stores elements in a sorted order
d) A data structure that stores elements in a binary tree
Answer: a) A data structure that stores elements in a first-in, first-out (FIFO) order

27. What is a linked list in C++?
a) A data structure that stores elements in an array
b) A data structure that stores elements in a stack
c) A data structure that stores elements in a queue
d) A data structure that stores elements in a sequence of nodes linked together
Answer: d) A data structure that stores elements in a sequence of nodes linked together

28. What is a doubly linked list in C++?
a) A linked list where each node has two pointers, one to the previous node and one to the next node
b) A linked list where each node has two values, one for the key and one for the data
c) A linked list where each node has two children, one to the left and one to the right
d) A linked list where each node has two weights, one for the distance and one for the cost
Answer: a) A linked list where each node has two pointers, one to the previous node and one to the next node

29. What is a binary tree in C++?
a) A tree where each node has two children
b) A tree where each node has three children
c) A tree where each node has four children
d) A tree where each node has five children
Answer: a) A tree where each node has two children

30. What is a binary search tree in C++?
a) A binary tree where each node has two children and the left child is smaller than the parent and the right child is greater than the parent
b) A binary tree where each node has two children and the left child is greater than the parent and the right child is smaller than the parent
c) A binary tree where each node has three children and the middle child is equal to the parent
d) A binary tree where each node has four children and the two middle children are equal to the parent
Answer: a) A binary tree where each node has two children and the left child is smaller than the parent and the right child is greater than the parent